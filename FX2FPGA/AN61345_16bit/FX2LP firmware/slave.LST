C51 COMPILER V7.07   SLAVE                                                                 12/31/2022 21:38:05 PAGE 1   


C51 COMPILER V7.07, COMPILATION OF MODULE SLAVE
OBJECT MODULE PLACED IN slave.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE slave.c OPTIMIZE(6,SPEED) DEBUG OBJECTEXTEND

stmt level    source

   1          #pragma NOIV                    // Do not generate interrupt vectors
   2          //-----------------------------------------------------------------------------
   3          //   File:      slave.c
   4          //   Contents:  Hooks required to implement USB peripheral function.
   5          //              Code written for FX2 REVE 56-pin and above.
   6          //              This firmware is used to demonstrate FX2 Slave FIF
   7          //              operation.
   8          //   Copyright (c) 2003 Cypress Semiconductor All rights reserved
   9          //-----------------------------------------------------------------------------
  10          #include "fx2.h"
  11          #include "fx2regs.h"
  12          #include "fx2sdly.h"            // SYNCDELAY macro
  13          
  14          #define LED_ALL         (bmBIT0 | bmBIT1 | bmBIT2 | bmBIT3)
  15          
  16          extern BOOL GotSUD;             // Received setup data flag
  17          extern BOOL Sleep;
  18          extern BOOL Rwuen;
  19          extern BOOL Selfpwr;
  20          
  21          BYTE Configuration;             // Current configuration
  22          BYTE AlternateSetting;          // Alternate settings
  23          static WORD xdata LED_Count = 0;
  24          static BYTE xdata LED_Status = 0;
  25          BOOL done_frm_fpga = 0;
  26          
  27          // EZUSB FX2 PORTA = slave fifo enable(s), when IFCFG[1:0]=11
  28          //sbit PA0 = IOA ^ 0;             // alt. func., INT0#
  29          //sbit PA1 = IOA ^ 1;             // alt. func., INT1#
  30          // sbit PA2 = IOA ^ 2;          // is SLOE
  31          //sbit PA3 = IOA ^ 3;             // alt. func., WU2
  32          // sbit PA4 = IOA ^ 4;          // is FIFOADR0
  33          // sbit PA5 = IOA ^ 5;          // is FIFOADR1
  34          // sbit PA6 = IOA ^ 6;          // is PKTEND
  35          // sbit PA7 = IOA ^ 7;          // is FLAGD
  36          
  37          // EZUSB FX2 PORTC i/o...       port NA for 56-pin FX2
  38          // sbit PC0 = IOC ^ 0;
  39          // sbit PC1 = IOC ^ 1;
  40          // sbit PC2 = IOC ^ 2;
  41          // sbit PC3 = IOC ^ 3;
  42          // sbit PC4 = IOC ^ 4;
  43          // sbit PC5 = IOC ^ 5;
  44          // sbit PC6 = IOC ^ 6;
  45          // sbit PC7 = IOC ^ 7;
  46          
  47          // EZUSB FX2 PORTB = FD[7:0], when IFCFG[1:0]=11
  48          // sbit PB0 = IOB ^ 0;
  49          // sbit PB1 = IOB ^ 1;
  50          // sbit PB2 = IOB ^ 2;
  51          // sbit PB3 = IOB ^ 3;
  52          // sbit PB4 = IOB ^ 4;
  53          // sbit PB5 = IOB ^ 5;
  54          // sbit PB6 = IOB ^ 6;
  55          // sbit PB7 = IOB ^ 7;
C51 COMPILER V7.07   SLAVE                                                                 12/31/2022 21:38:05 PAGE 2   

  56          
  57          // EZUSB FX2 PORTD = FD[15:8], when IFCFG[1:0]=11 and WORDWIDE=1
  58          //sbit PD0 = IOD ^ 0;
  59          //sbit PD1 = IOD ^ 1;
  60          //sbit PD2 = IOD ^ 2;
  61          //sbit PD3 = IOD ^ 3;
  62          //sbit PD4 = IOD ^ 4;
  63          //sbit PD5 = IOD ^ 5;
  64          //sbit PD6 = IOD ^ 6;
  65          //sbit PD7 = IOD ^ 7;
  66          
  67          // EZUSB FX2 PORTE is not bit-addressable...
  68          
  69          //-----------------------------------------------------------------------------
  70          // Task Dispatcher hooks
  71          // The following hooks are called by the task dispatcher.
  72          //-----------------------------------------------------------------------------
  73          //void LED_Off (BYTE LED_Mask);
  74          //void LED_On (BYTE LED_Mask);
  75          
  76          //-----------------------------------------------------------------------------
  77          // Task Dispatcher hooks
  78          //   The following hooks are called by the task dispatcher.
  79          //-----------------------------------------------------------------------------
  80          void TD_Init( void )
  81          { // Called once at startup
  82   1      
  83   1        CPUCS = 0x12; // CLKSPD[1:0]=10, for 48MHz operation, output CLKOUT
  84   1      
  85   1        PINFLAGSAB = 0x08;                    // FLAGA - EP2EF
  86   1        SYNCDELAY;
  87   1        PINFLAGSCD = 0xE0;                    // FLAGD - EP6FF
  88   1        SYNCDELAY;
  89   1        //PORTACFG |= 0x80;
  90   1        PORTACFG = 0x80;      // hong 
  91   1        SYNCDELAY;
  92   1        //IFCONFIG = 0xE3; //Internal clock, 48 MHz, Slave FIFO interface
  93   1        IFCONFIG = 0x03;  //external clock input, Slave FIFO interface        //      hong : fix to receive IFCLK from exter
             -nal
  94   1        SYNCDELAY;
  95   1      
  96   1        // IFCLKSRC=1   , FIFOs executes on internal clk source 
  97   1        // xMHz=1       , 48MHz operation
  98   1        // IFCLKOE=1    ,Drive IFCLK pin signal at 48MHz
  99   1        // IFCLKPOL=0   , Don't invert IFCLK pin signal from internal clk
 100   1        // ASYNC=0      , master samples synchronous
 101   1        // GSTATE=0     , Don't drive GPIF states out on PORTE[2:0], debug WF
 102   1        // IFCFG[1:0]=11, FX2 in slave FIFO mode
 103   1      
 104   1      
 105   1        // Registers which require a synchronization delay, see section 15.14
 106   1        // FIFORESET        FIFOPINPOLAR
 107   1        // INPKTEND         OUTPKTEND
 108   1        // EPxBCH:L         REVCTL
 109   1        // GPIFTCB3         GPIFTCB2
 110   1        // GPIFTCB1         GPIFTCB0
 111   1        // EPxFIFOPFH:L     EPxAUTOINLENH:L
 112   1        // EPxFIFOCFG       EPxGPIFFLGSEL
 113   1        // PINFLAGSxx       EPxFIFOIRQ
 114   1        // EPxFIFOIE        GPIFIRQ
 115   1        // GPIFIE           GPIFADRH:L
 116   1        // UDMACRCH:L       EPxGPIFTRIG
C51 COMPILER V7.07   SLAVE                                                                 12/31/2022 21:38:05 PAGE 3   

 117   1        // GPIFTRIG
 118   1        
 119   1        // Note: The pre-REVE EPxGPIFTCH/L register are affected, as well...
 120   1        //      ...these have been replaced by GPIFTC[B3:B0] registers
 121   1      
 122   1        // EP4 and EP8 are not used in this implementation...
 123   1                         
 124   1        EP2CFG = 0xA0;                //out 512 bytes, 4x, bulk
 125   1        SYNCDELAY;                    
 126   1        EP6CFG = 0xE0;                // in 512 bytes, 4x, bulk
 127   1        SYNCDELAY;              
 128   1        EP4CFG = 0x02;                //clear valid bit
 129   1        SYNCDELAY;                     
 130   1        EP8CFG = 0x02;                //clear valid bit
 131   1        SYNCDELAY;   
 132   1      
 133   1        SYNCDELAY;
 134   1        FIFORESET = 0x80;             // activate NAK-ALL to avoid race conditions
 135   1        SYNCDELAY;                    // see TRM section 15.14
 136   1        FIFORESET = 0x02;             // reset, FIFO 2
 137   1        SYNCDELAY;                    // 
 138   1        FIFORESET = 0x04;             // reset, FIFO 4
 139   1        SYNCDELAY;                    // 
 140   1        FIFORESET = 0x06;             // reset, FIFO 6
 141   1        SYNCDELAY;                    // 
 142   1        FIFORESET = 0x08;             // reset, FIFO 8
 143   1        SYNCDELAY;                    // 
 144   1        FIFORESET = 0x00;             // deactivate NAK-ALL
 145   1      
 146   1      
 147   1        // handle the case where we were already in AUTO mode...
 148   1        // ...for example: back to back firmware downloads...
 149   1        SYNCDELAY;                    // 
 150   1        EP2FIFOCFG = 0x00;            // AUTOOUT=0, WORDWIDE=1
 151   1        
 152   1        // core needs to see AUTOOUT=0 to AUTOOUT=1 switch to arm endp's
 153   1        
 154   1        SYNCDELAY;                    // 
 155   1        EP2FIFOCFG = 0x11;            // AUTOOUT=1, WORDWIDE=1
 156   1        
 157   1        SYNCDELAY;                    // 
 158   1        EP6FIFOCFG = 0x0D;            // AUTOIN=1, ZEROLENIN=1, WORDWIDE=1
 159   1      
 160   1        SYNCDELAY;
 161   1      
 162   1      
 163   1      //JTAG Enable and SYNC signals for ZTEX Spartan 6 module 1.1 (FGPA+FX2LP setup)
 164   1              /* hong : disable PA, PC setting
 165   1              OEA|=0x02; //Declare PA.1 as output
 166   1              SYNCDELAY;
 167   1              IOA|=0x02; //output 1 on PA.1
 168   1              SYNCDELAY;
 169   1      
 170   1              OEC|=0x01; //PC.0 as output (SYNC signal)
 171   1              SYNCDELAY;
 172   1              IOC|=0x00; //output 0 on PC.0...SYNC signal is LOW 
 173   1              SYNCDELAY;
 174   1              OEC&=0xFD; //PC.1 as input (Clock changing signal)
 175   1              SYNCDELAY;
 176   1              */
 177   1      
 178   1              
C51 COMPILER V7.07   SLAVE                                                                 12/31/2022 21:38:05 PAGE 4   

 179   1      }
 180          
 181          void TD_Poll( void )
 182          { // Called repeatedly while the device is idle
 183   1                      /* hong : disable sync control
 184   1                      if(!(IOC & 0x02))
 185   1                      {
 186   1                      done_frm_fpga = 1;
 187   1                      }
 188   1                      if ((done_frm_fpga) && (IOC & 0x02))
 189   1                      {
 190   1                              IFCONFIG = 0x03;  //external clock input, Slave FIFO interface
 191   1                              SYNCDELAY;
 192   1                      
 193   1                              IOC|=0x01; //output 1 on PC.0...SYNC signal is HIGH 
 194   1                              SYNCDELAY;
 195   1                              done_frm_fpga = 0;
 196   1                              
 197   1                      }
 198   1                      */
 199   1      }
 200          
 201          BOOL TD_Suspend( void )          
 202          { // Called before the device goes into suspend mode
 203   1         return( TRUE );
 204   1      }
 205          
 206          BOOL TD_Resume( void )          
 207          { // Called after the device resumes
 208   1         return( TRUE );
 209   1      }
 210          
 211          //-----------------------------------------------------------------------------
 212          // Device Request hooks
 213          //   The following hooks are called by the end point 0 device request parser.
 214          //-----------------------------------------------------------------------------
 215          BOOL DR_GetDescriptor( void )
 216          {
 217   1         return( TRUE );
 218   1      }
 219          
 220          BOOL DR_SetConfiguration( void )   
 221          { // Called when a Set Configuration command is received
 222   1        
 223   1        if( EZUSB_HIGHSPEED( ) )
 224   1        { // ...FX2 in high speed mode
 225   2          EP6AUTOINLENH = 0x02;
 226   2          SYNCDELAY;
 227   2          EP8AUTOINLENH = 0x02;   // set core AUTO commit len = 512 bytes
 228   2          SYNCDELAY;
 229   2          EP6AUTOINLENL = 0x00;
 230   2          SYNCDELAY;
 231   2          EP8AUTOINLENL = 0x00;
 232   2        }
 233   1        else
 234   1        { // ...FX2 in full speed mode
 235   2          EP6AUTOINLENH = 0x00;
 236   2          SYNCDELAY;
 237   2          EP8AUTOINLENH = 0x00;   // set core AUTO commit len = 64 bytes
 238   2          SYNCDELAY;
 239   2          EP6AUTOINLENL = 0x40;
 240   2          SYNCDELAY;
C51 COMPILER V7.07   SLAVE                                                                 12/31/2022 21:38:05 PAGE 5   

 241   2          EP8AUTOINLENL = 0x40;
 242   2        }
 243   1            
 244   1        Configuration = SETUPDAT[ 2 ];
 245   1        return( TRUE );        // Handled by user code
 246   1      }
 247          
 248          BOOL DR_GetConfiguration( void )   
 249          { // Called when a Get Configuration command is received
 250   1         EP0BUF[ 0 ] = Configuration;
 251   1         EP0BCH = 0;
 252   1         EP0BCL = 1;
 253   1         return(TRUE);          // Handled by user code
 254   1      }
 255          
 256          BOOL DR_SetInterface( void )       
 257          { // Called when a Set Interface command is received
 258   1         AlternateSetting = SETUPDAT[ 2 ];
 259   1         return( TRUE );        // Handled by user code
 260   1      }
 261          
 262          BOOL DR_GetInterface( void )       
 263          { // Called when a Set Interface command is received
 264   1         EP0BUF[ 0 ] = AlternateSetting;
 265   1         EP0BCH = 0;
 266   1         EP0BCL = 1;
 267   1         return( TRUE );        // Handled by user code
 268   1      }
 269          
 270          BOOL DR_GetStatus( void )
 271          {
 272   1         return( TRUE );
 273   1      }
 274          
 275          BOOL DR_ClearFeature( void )
 276          {
 277   1         return( TRUE );
 278   1      }
 279          
 280          BOOL DR_SetFeature( void )
 281          {
 282   1         return( TRUE );
 283   1      }
 284          
 285          BOOL DR_VendorCmnd( void )
 286          {
 287   1        return( TRUE );
 288   1      }
 289          
 290          //-----------------------------------------------------------------------------
 291          // USB Interrupt Handlers
 292          //   The following functions are called by the USB interrupt jump table.
 293          //-----------------------------------------------------------------------------
 294          
 295          // Setup Data Available Interrupt Handler
 296          void ISR_Sudav( void ) interrupt 0
 297          {
 298   1         GotSUD = TRUE;         // Set flag
 299   1         EZUSB_IRQ_CLEAR( );
 300   1         USBIRQ = bmSUDAV;      // Clear SUDAV IRQ
 301   1      }
 302          
C51 COMPILER V7.07   SLAVE                                                                 12/31/2022 21:38:05 PAGE 6   

 303          // Setup Token Interrupt Handler
 304          void ISR_Sutok( void ) interrupt 0
 305          {
 306   1         EZUSB_IRQ_CLEAR( );
 307   1         USBIRQ = bmSUTOK;      // Clear SUTOK IRQ
 308   1      }
 309          
 310          void ISR_Sof( void ) interrupt 0
 311          {
 312   1         EZUSB_IRQ_CLEAR( );
 313   1         USBIRQ = bmSOF;        // Clear SOF IRQ
 314   1      }
 315          
 316          void ISR_Ures( void ) interrupt 0
 317          {
 318   1         if ( EZUSB_HIGHSPEED( ) )
 319   1         {
 320   2            pConfigDscr = pHighSpeedConfigDscr;
 321   2            pOtherConfigDscr = pFullSpeedConfigDscr;
 322   2         }
 323   1         else
 324   1         {
 325   2            pConfigDscr = pFullSpeedConfigDscr;
 326   2            pOtherConfigDscr = pHighSpeedConfigDscr;
 327   2         }
 328   1         
 329   1         EZUSB_IRQ_CLEAR( );
 330   1         USBIRQ = bmURES;       // Clear URES IRQ
 331   1      }
 332          
 333          void ISR_Susp( void ) interrupt 0
 334          {
 335   1         Sleep = TRUE;
 336   1         EZUSB_IRQ_CLEAR( );
 337   1         USBIRQ = bmSUSP;
 338   1      }
 339          
 340          void ISR_Highspeed( void ) interrupt 0
 341          {
 342   1         if ( EZUSB_HIGHSPEED( ) )
 343   1         {
 344   2            pConfigDscr = pHighSpeedConfigDscr;
 345   2            pOtherConfigDscr = pFullSpeedConfigDscr;
 346   2         }
 347   1         else
 348   1         {
 349   2            pConfigDscr = pFullSpeedConfigDscr;
 350   2            pOtherConfigDscr = pHighSpeedConfigDscr;
 351   2         }
 352   1      
 353   1         EZUSB_IRQ_CLEAR( );
 354   1         USBIRQ = bmHSGRANT;
 355   1      }
 356          void ISR_Ep0ack( void ) interrupt 0
 357          {
 358   1      }
 359          void ISR_Stub( void ) interrupt 0
 360          {
 361   1      }
 362          void ISR_Ep0in( void ) interrupt 0
 363          {
 364   1      }
C51 COMPILER V7.07   SLAVE                                                                 12/31/2022 21:38:05 PAGE 7   

 365          void ISR_Ep0out( void ) interrupt 0
 366          {
 367   1      }
 368          void ISR_Ep1in( void ) interrupt 0
 369          {
 370   1      }
 371          void ISR_Ep1out( void ) interrupt 0
 372          {
 373   1      }
 374          void ISR_Ep2inout( void ) interrupt 0
 375          {
 376   1      }
 377          void ISR_Ep4inout( void ) interrupt 0
 378          {
 379   1      }
 380          void ISR_Ep6inout( void ) interrupt 0
 381          {
 382   1      }
 383          void ISR_Ep8inout( void ) interrupt 0
 384          {
 385   1      }
 386          void ISR_Ibn( void ) interrupt 0
 387          {
 388   1      }
 389          void ISR_Ep0pingnak( void ) interrupt 0
 390          {
 391   1      }
 392          void ISR_Ep1pingnak( void ) interrupt 0
 393          {
 394   1      }
 395          void ISR_Ep2pingnak( void ) interrupt 0
 396          {
 397   1      }
 398          void ISR_Ep4pingnak( void ) interrupt 0
 399          {
 400   1      }
 401          void ISR_Ep6pingnak( void ) interrupt 0
 402          {
 403   1      }
 404          void ISR_Ep8pingnak( void ) interrupt 0
 405          {
 406   1      }
 407          void ISR_Errorlimit( void ) interrupt 0
 408          {
 409   1      }
 410          void ISR_Ep2piderror( void ) interrupt 0
 411          {
 412   1      }
 413          void ISR_Ep4piderror( void ) interrupt 0
 414          {
 415   1      }
 416          void ISR_Ep6piderror( void ) interrupt 0
 417          {
 418   1      }
 419          void ISR_Ep8piderror( void ) interrupt 0
 420          {
 421   1      }
 422          void ISR_Ep2pflag( void ) interrupt 0
 423          {
 424   1      }
 425          void ISR_Ep4pflag( void ) interrupt 0
 426          {
C51 COMPILER V7.07   SLAVE                                                                 12/31/2022 21:38:05 PAGE 8   

 427   1      }
 428          void ISR_Ep6pflag( void ) interrupt 0
 429          {
 430   1      }
 431          void ISR_Ep8pflag( void ) interrupt 0
 432          {
 433   1      }
 434          void ISR_Ep2eflag( void ) interrupt 0
 435          {
 436   1      }
 437          void ISR_Ep4eflag( void ) interrupt 0
 438          {
 439   1      }
 440          void ISR_Ep6eflag( void ) interrupt 0
 441          {
 442   1      }
 443          void ISR_Ep8eflag( void ) interrupt 0
 444          {
 445   1      }
 446          void ISR_Ep2fflag( void ) interrupt 0
 447          {
 448   1      }
 449          void ISR_Ep4fflag( void ) interrupt 0
 450          {
 451   1      }
 452          void ISR_Ep6fflag( void ) interrupt 0
 453          {
 454   1      }
 455          void ISR_Ep8fflag( void ) interrupt 0
 456          {
 457   1      }
 458          void ISR_GpifComplete( void ) interrupt 0
 459          {
 460   1      }
 461          void ISR_GpifWaveform( void ) interrupt 0
 462          {
 463   1      }
 464          /*
 465          // ...debug LEDs: accessed via movx reads only ( through CPLD )
 466          // it may be worth noting here that the default monitor loads at 0xC000
 467          xdata volatile const BYTE LED0_ON  _at_ 0x8000;
 468          xdata volatile const BYTE LED0_OFF _at_ 0x8100;
 469          xdata volatile const BYTE LED1_ON  _at_ 0x9000;
 470          xdata volatile const BYTE LED1_OFF _at_ 0x9100;
 471          xdata volatile const BYTE LED2_ON  _at_ 0xA000;
 472          xdata volatile const BYTE LED2_OFF _at_ 0xA100;
 473          xdata volatile const BYTE LED3_ON  _at_ 0xB000;
 474          xdata volatile const BYTE LED3_OFF _at_ 0xB100;
 475          // use this global variable when (de)asserting debug LEDs...
 476          BYTE xdata ledX_rdvar = 0x00;
 477          BYTE xdata LED_State = 0;
 478          void LED_Off (BYTE LED_Mask)
 479          {
 480                  if (LED_Mask & bmBIT0)
 481                  {
 482                          ledX_rdvar = LED0_OFF;
 483                          LED_State &= ~bmBIT0;
 484                  }
 485                  if (LED_Mask & bmBIT1)
 486                  {
 487                          ledX_rdvar = LED1_OFF;
 488                          LED_State &= ~bmBIT1;
C51 COMPILER V7.07   SLAVE                                                                 12/31/2022 21:38:05 PAGE 9   

 489                  }
 490                  if (LED_Mask & bmBIT2)
 491                  {
 492                          ledX_rdvar = LED2_OFF;
 493                          LED_State &= ~bmBIT2;
 494                  }
 495                  if (LED_Mask & bmBIT3)
 496                  {
 497                          ledX_rdvar = LED3_OFF;
 498                          LED_State &= ~bmBIT3;
 499                  }
 500          }
 501          
 502          void LED_On (BYTE LED_Mask)
 503          {
 504                  if (LED_Mask & bmBIT0)
 505                  {
 506                          ledX_rdvar = LED0_ON;
 507                          LED_State |= bmBIT0;
 508                  }
 509                  if (LED_Mask & bmBIT1)
 510                  {
 511                          ledX_rdvar = LED1_ON;
 512                          LED_State |= bmBIT1;
 513                  }
 514                  if (LED_Mask & bmBIT2)
 515                  {
 516                          ledX_rdvar = LED2_ON;
 517                          LED_State |= bmBIT2;
 518                  }
 519                  if (LED_Mask & bmBIT3)
 520                  {
 521                          ledX_rdvar = LED3_ON;
 522                          LED_State |= bmBIT3;
 523                  }
 524          }
 525          */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    510    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      3    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
