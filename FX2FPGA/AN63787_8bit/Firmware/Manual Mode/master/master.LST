C51 COMPILER V7.06   MASTER                                                                10/16/2013 16:15:40 PAGE 1   


C51 COMPILER V7.06, COMPILATION OF MODULE MASTER
OBJECT MODULE PLACED IN master.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE master.c BROWSE INCDIR(..\inc\) DEBUG OBJECTEXTEND

stmt level    source

   1          #pragma NOIV               // Do not generate interrupt vectors
   2          //-----------------------------------------------------------------------------
   3          //   File:       master.c
   4          //   Contents:   Hooks required to implement FX2 B2B interface
   5          //
   6          //   Copyright (c) 2003 Cypress Semiconductor, Inc. All rights reserved
   7          //-----------------------------------------------------------------------------
   8          #include "fx2.h"
   9          #include "fx2regs.h"
  10          #include "fx2sdly.h"            // SYNCDELAY macro, see Section 15.14 of FX2 Tech.
  11                                          // Ref. Manual for usage details.
  12          
  13          #define SLAVENOTFULL   GPIFREADYSTAT & bmBIT1
  14          #define SLAVENOTEMPTY  GPIFREADYSTAT & bmBIT0
  15          
  16          #define GPIFTRIGWR 0
  17          #define GPIFTRIGRD 4
  18          
  19          #define GPIF_EP2 0
  20          #define GPIF_EP4 1
  21          #define GPIF_EP6 2
  22          #define GPIF_EP8 3
  23          #define EP2EMPTY 0x02
  24          #define EP6FULL  0x01
  25          
  26          #define LED_ALL         (bmBIT0 | bmBIT1 | bmBIT2 | bmBIT3)
  27          
  28          // 7-segment readout
  29          #define LED_ADDR                0x21
  30          BYTE xdata Digit[] = { 0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x98, 0x88, 0x83, 0xc6, 0xa1,
             - 0x86, 0x8e };
  31          
  32          // EZUSB FX2 PORTA = slave fifo enable(s), when IFCFG[1:0]=11
  33          sbit PERIPH_PA0 = IOA ^ 0;      // tied to peripheral PA0 pin
  34          sbit PERIPH_PA1 = IOA ^ 1;      // tied to peripheral PA1 pin
  35          sbit NA_PA2 = IOA ^ 2;          // not used (make it an output)
  36          sbit PERIPH_PA3 = IOA ^ 3;      // tied to peripheral PA3 pin
  37          sbit PERIPH_FLAGA = IOA ^ 4;    // tied to peripheral PF pin (programmable flag)  
  38          sbit PERIPH_PA7 = IOA ^ 5;      // tied to peripheral FLAGD pin (not used)
  39          sbit PERIPH_FIFOADR0 = IOA ^ 6; // tied to peripheral FIFOADR0 pin
  40          sbit PERIPH_FIFOADR1 = IOA ^ 7; // tied to peripheral FIFOADR1 pin
  41          
  42          
  43          // EZUSB FX2 PORTB = FD[7:0], when IFCFG[1:0]=10
  44          // sbit PB0 = IOB ^ 0;
  45          // sbit PB1 = IOB ^ 1;
  46          // sbit PB2 = IOB ^ 2;
  47          // sbit PB3 = IOB ^ 3;
  48          // sbit PB4 = IOB ^ 4;
  49          // sbit PB5 = IOB ^ 5;
  50          // sbit PB6 = IOB ^ 6;
  51          // sbit PB7 = IOB ^ 7;
  52          
  53          // EZUSB FX2 PORTD = FD[15:8], when IFCFG[1:0]=10 and WORDWIDE=1
  54          // sbit PD0 = IOD ^ 0;
C51 COMPILER V7.06   MASTER                                                                10/16/2013 16:15:40 PAGE 2   

  55          // sbit PD1 = IOD ^ 1;
  56          // sbit PD2 = IOD ^ 2;
  57          // sbit PD3 = IOD ^ 3;
  58          // sbit PD4 = IOD ^ 4;
  59          // sbit PD5 = IOD ^ 5;
  60          // sbit PD6 = IOD ^ 6;
  61          // sbit PD7 = IOD ^ 7;
  62          
  63          BOOL zerolenpkt = 0;            // issued by peripheral for zero length packet
  64          
  65          // ...debug LEDs: accessed via movx reads only ( through CPLD )
  66          xdata volatile const BYTE LED0_ON  _at_ 0x8800;
  67          xdata volatile const BYTE LED0_OFF _at_ 0x8000;
  68          xdata volatile const BYTE LED1_ON  _at_ 0x9800;
  69          xdata volatile const BYTE LED1_OFF _at_ 0x9000;
  70          xdata volatile const BYTE LED2_ON  _at_ 0xA800;
  71          xdata volatile const BYTE LED2_OFF _at_ 0xA000;
  72          xdata volatile const BYTE LED3_ON  _at_ 0xB800;
  73          xdata volatile const BYTE LED3_OFF _at_ 0xB000;
  74          static WORD xdata LED_Count = 0;
  75          static BYTE xdata LED_Status = 0;
  76          static WORD xdata Blink_Rate = 30000;
  77          // use this global variable when (de)asserting debug LEDs...
  78          BYTE ledX_rdvar = 0x00;
  79          BYTE xdata LED_State = 0;
  80          
  81          // it may be worth noting here that the default monitor loads at 0xC000
  82          extern BOOL GotSUD;             // Received setup data flag
  83          extern BOOL Sleep;
  84          extern BOOL Rwuen;
  85          extern BOOL Selfpwr;
  86          BOOL flg_trig =FALSE;
  87          BOOL flg_out = FALSE;
  88          BOOL flg_in = FALSE;
  89          
  90          void LED_Off (BYTE LED_Mask);
  91          void LED_On (BYTE LED_Mask);
  92          void LED_Control();
  93          BOOL auto_mode = FALSE;
  94          
  95          BYTE Configuration;                 // Current configuration
  96          BYTE AlternateSetting;              // Alternate settings
  97          BOOL in_enable = TRUE;             // flag to enable IN transfers
  98          BOOL enum_high_speed = FALSE;       // flag to let firmware know FX2 enumerated at high speed
  99          extern const char xdata FlowStates[36];
 100          #define Txn_Over PC0
 101          #define Pkt_Committed PC1
 102          #define SLAVEREADY      PC2   
 103          bit b = 0;
 104          
 105          //-----------------------------------------------------------------------------
 106          // Task Dispatcher hooks
 107          //   The following hooks are called by the task dispatcher.
 108          //-----------------------------------------------------------------------------
 109          
 110          void GpifInit ();
 111          
 112          void TD_Init(void)             // Called once at startup
 113          {
 114   1        // set the CPU clock to 48MHz
 115   1        //CPUCS = ((CPUCS & ~bmCLKSPD) | bmCLKSPD1);
 116   1        CPUCS = 0x10;                 // CLKSPD[1:0]=10, for 48MHz operation
C51 COMPILER V7.06   MASTER                                                                10/16/2013 16:15:40 PAGE 3   

 117   1        SYNCDELAY;                    // CLKOE=0, don't drive CLKOUT
 118   1        
 119   1        GpifInit();                  // init GPIF engine via GPIFTool output file
 120   1        REVCTL = 0x03;
 121   1        SYNCDELAY;
 122   1      
 123   1        #ifdef Seven_segment 
 124   1        EZUSB_INITI2C();                              // initialize I2C for 7-seg readout
*** WARNING C206 IN LINE 124 OF MASTER.C: 'EZUSB_INITI2C': missing function-prototype
 125   1        Blink_Rate = 1000;  
 126   1        #endif
 127   1        
 128   1        // Register which require a synchronization delay, see section 15.14
 129   1        // FIFORESET        FIFOPINPOLAR
 130   1        // INPKTEND         EPxBCH:L
 131   1        // EPxFIFOPFH:L     EPxAUTOINLENH:L
 132   1        // EPxFIFOCFG       EPxGPIFFLGSEL
 133   1        // PINFLAGSxx       EPxFIFOIRQ
 134   1        // EPxFIFOIE        GPIFIRQ
 135   1        // GPIFIE           GPIFADRH:L
 136   1        // UDMACRCH:L       EPxGPIFTRIG
 137   1        // GPIFTRIG
 138   1      
 139   1        EP2CFG = 0xA0;     // EP2OUT, bulk, size 512, 4x buffered
 140   1        SYNCDELAY;           
 141   1        EP6CFG = 0xE0;     // EP6IN, bulk, size 512, 4x buffered
 142   1        SYNCDELAY;
 143   1        EP4CFG = 0x00;     // EP4 not valid
 144   1        SYNCDELAY;               
 145   1        EP8CFG = 0x00;     // EP8 not valid
 146   1        SYNCDELAY;
 147   1       
 148   1        FIFORESET = 0x80;  // set NAKALL bit to NAK all transfers from host
 149   1        SYNCDELAY;
 150   1        FIFORESET = 0x02;  // reset EP2 FIFO
 151   1        SYNCDELAY;
 152   1        FIFORESET = 0x06;  // reset EP6 FIFO
 153   1        SYNCDELAY;
 154   1        FIFORESET = 0x04;  // reset EP4 FIFO
 155   1        SYNCDELAY;
 156   1        FIFORESET = 0x08;  // reset EP8 FIFO
 157   1        SYNCDELAY;
 158   1        FIFORESET = 0x00;  // clear NAKALL bit to resume normal operation
 159   1        SYNCDELAY;
 160   1      
 161   1        EP2FIFOCFG = 0x00; //manual mode, 8 bit mode
 162   1        SYNCDELAY;
 163   1        EP6FIFOCFG = 0x00; //manual mode, 8 bit mode.
 164   1        SYNCDELAY; 
 165   1        
 166   1        OUTPKTEND =0x82;   //arming the EP2 OUT endpoint quadruple times, as it's quad buffered.
 167   1        SYNCDELAY;
 168   1        OUTPKTEND =0x82;
 169   1        SYNCDELAY; 
 170   1        OUTPKTEND =0x82;   
 171   1        SYNCDELAY;
 172   1        OUTPKTEND =0x82;
 173   1        SYNCDELAY; 
 174   1      
 175   1        EP2GPIFFLGSEL = 0x02; // For EP2OUT, GPIF uses FF flag
 176   1        SYNCDELAY;
 177   1        EP6GPIFFLGSEL = 0x01; // For EP6IN, GPIF uses EF flag
C51 COMPILER V7.06   MASTER                                                                10/16/2013 16:15:40 PAGE 4   

 178   1        SYNCDELAY;
 179   1        
 180   1        // IN endp's come up in the cpu/peripheral domain
 181   1      
 182   1              PORTCCFG = 0x00;              //configure port C as an I/O port
 183   1              OEC= 0xF9;                    // Txn_Over configured as output, Pkt_Committed configured as input,Slave
             - Ready as input
 184   1          PC0=1;                                                      
 185   1              
 186   1              OEA = 0xC0;                   // PA[7:6]=11 -> outputs (tied to peripheral FIFOADR[1:0] pins
 187   1          PORTACFG |= 0x01;             // setting BIT 0 to configure PORTA_0 pin as alt. func INTO#
 188   1        
 189   1        // enable INTO# external pin interrupt, used by peripheral to issue ZEROLENPKT
 190   1        EX0 = 1;                      // enable INT0# pin ISR
 191   1        IT0 = 1;                      // configure INT0# pin, edge trigger
 192   1        
 193   1        // turn debug LED[3:0] off...
 194   1       
 195   1      }
 196          
 197          void TD_Poll(void)
 198          {
 199   1      
 200   1      BYTE waiting_inpkts;    
 201   1      // update 7-seg readout with number of IN packets in EP6 waiting for transfer to the host
 202   1      #ifdef Seven_segment 
 203   1        waiting_inpkts = (EP6CS & 0xF0)>>4;                   //right shift by 4 bits
 204   1        EZUSB_WriteI2C(LED_ADDR, 0x01, &(Digit[waiting_inpkts]));
 205   1        EZUSB_WaitForEEPROMWrite(LED_ADDR);
 206   1      #endif
 207   1      
 208   1      // blink LED D2 to indicate firmware is running and LED D4 and D5 to show the states of FIFO of EP2 and EP
             -6
 209   1      #ifdef LED_Enable
 210   1      LED_Control();  
 211   1      #endif
 212   1      
 213   1              if( Pkt_Committed == ~b)          //if Pkt_Committed has been toggled, it means the previous packet sent 
             -by the GPIF master has been processed and committed by the slave, it is now ready to accept another packet
 214   1              {
 215   2               b = Pkt_Committed;               // store the current state of Pkt_Committed in variable b so that t
             -he next toggle can be detected
 216   2                       Txn_Over = 1;                    //assert Txn_Over "high". It will be pulled low later to inform the s
             -lave that a GPIF transaction has been completed
 217   2              }
 218   1      
 219   1        // Handle OUT data...
 220   1                        
 221   1                if( (!( EP2468STAT & 0x01 )) )   //if EP2 is not empty, modify the packet and commit it to the peripher
             -al domain
 222   1               {  
 223   2                  SYNCDELAY; //
 224   2                      EP2FIFOBUF[0] = 0x01; // editing the packet
 225   2                          SYNCDELAY; 
 226   2                          EP2FIFOBUF[1] = 0x02; 
 227   2                          SYNCDELAY; 
 228   2                          EP2FIFOBUF[2] = 0x03; 
 229   2                          SYNCDELAY; 
 230   2                          EP2FIFOBUF[3] = 0x04; 
 231   2                          SYNCDELAY; 
 232   2                          EP2FIFOBUF[4] = 0x05; 
 233   2                          SYNCDELAY; 
C51 COMPILER V7.06   MASTER                                                                10/16/2013 16:15:40 PAGE 5   

 234   2                          EP2BCH = 0x02;
 235   2                      SYNCDELAY; 
 236   2                          EP2BCL = 0x00;       // commit edited pkt. to interface fifo
 237   2                          SYNCDELAY; 
 238   2            }
 239   1                          
 240   1                     if ( ! (EP24FIFOFLGS & 0x02) )     
 241   1                     {
 242   2                          if((SLAVENOTFULL) && (Txn_Over == 1))   //if slave is not full and Txn_Over =1 meaning,
 243   2                                                                                                              // the slave has committed previous packet to the host
 244   2                                                                                                              // and is ready to accept next packet of data from master
 245   2                                      {
 246   3                                      if( GPIFTRIG & 0x80 )               // if GPIF interface IDLE
 247   3                              {         
 248   4                                       PERIPH_FIFOADR0 = 0;               // FIFOADR[1:0]=10 - point to peripheral EP6 
 249   4                                       PERIPH_FIFOADR1 = 1;               
 250   4                                        SYNCDELAY;            
 251   4                                                if(enum_high_speed)                   //usb high-speed mode
 252   4                                               {
 253   5                                                       SYNCDELAY;    
 254   5                                               GPIFTCB1 = 0x02;          // setup transaction count 512
 255   5                                           SYNCDELAY;
 256   5                                           GPIFTCB0 = 0x00;   
 257   5                                           SYNCDELAY;
 258   5                                               }
 259   4                                               else
 260   4                                               {
 261   5                                                        SYNCDELAY;
 262   5                                                        GPIFTCB1 = 0x00;            // setup transaction count 64
 263   5                                                SYNCDELAY;
 264   5                                                        GPIFTCB0 = 0x40;
 265   5                                                        SYNCDELAY;
 266   5                                               }          
 267   4                                       SYNCDELAY;
 268   4                                       GPIFTRIG = GPIFTRIGWR | GPIF_EP2;  // launch GPIF FIFO WRITE Transaction from EP2 FIFO
 269   4                                       SYNCDELAY;
 270   4                                               while( !( GPIFTRIG & 0x80 ) )      // poll GPIFTRIG.7 GPIF Done bit
 271   4                                       {
 272   5                                          ;
 273   5                                       }
 274   4                                   SYNCDELAY;
 275   4                                       Txn_Over = 0;            //assert Txn_Over line to indicate that a packet has been transmitted
 276   4                               }
 277   3                        }
 278   2                       } 
 279   1      
 280   1        // Handle IN data...
 281   1      
 282   1        if(SLAVEREADY)                                                //checking if slave firmware is ready i.e. if PC2=1
 283   1        {
 284   2        if ( GPIFTRIG & 0x80 )                  // if GPIF interface IDLE - triggering gpif IN transfers
 285   2        { 
 286   3          PERIPH_FIFOADR0 = 0;
 287   3          PERIPH_FIFOADR1 = 0;              // FIFOADR[1:0]=00 - point to peripheral EP2
 288   3          SYNCDELAY;   
 289   3      
 290   3          if ( SLAVENOTEMPTY )                // if slave is not empty
 291   3          {
 292   4            if ( !( EP68FIFOFLGS & EP6FULL ) )     // if EP6 FIFO is not full
 293   4                      {  
 294   5              if(enum_high_speed)                               //usb high-speed mode
 295   5                  {
C51 COMPILER V7.06   MASTER                                                                10/16/2013 16:15:40 PAGE 6   

 296   6                    SYNCDELAY;    
 297   6                GPIFTCB1 = 0x02;                // setup transaction count 
 298   6                SYNCDELAY;
 299   6                GPIFTCB0 = 0x00;
 300   6                SYNCDELAY;
 301   6                  }
 302   5                  else
 303   5                  {
 304   6                    SYNCDELAY;
 305   6                    GPIFTCB1 = 0x00;                // setup transaction count
 306   6                SYNCDELAY;
 307   6                    GPIFTCB0 = 0x40;
 308   6                    SYNCDELAY;
 309   6                  }
 310   5      
 311   5              GPIFTRIG = GPIFTRIGRD | GPIF_EP6; // launch GPIF FIFO READ Transaction to EP6 FIFO
 312   5              SYNCDELAY;
 313   5                              
 314   5              while( !( GPIFTRIG & 0x80 ) )     // poll GPIFTRIG.7 GPIF Done bit
 315   5              {
 316   6                ;
 317   6              }
 318   5                          
 319   5                          EP6FIFOBUF[ 4 ] = 0x05; //edit the last five packets before committing
 320   5                              EP6FIFOBUF[ 3] = 0x04; 
 321   5                              EP6FIFOBUF[ 2 ] = 0x03; 
 322   5                              EP6FIFOBUF[ 1 ] = 0x02; 
 323   5                              EP6FIFOBUF[ 0 ] = 0x01;
 324   5                              SYNCDELAY;
 325   5                              SYNCDELAY;
 326   5                              EP6BCH = 0x02;            //commiting the packet
 327   5                              SYNCDELAY;
 328   5                              EP6BCL = 0x00;
 329   5                              SYNCDELAY;
 330   5                }
 331   4         }
 332   3        }
 333   2      }
 334   1      // This will keep resetting Master EP6FIFO untill slave firmware starts to run
 335   1      else {
 336   2        FIFORESET = 0x80;  // set NAKALL bit to NAK all transfers from host
 337   2        SYNCDELAY;
 338   2        FIFORESET = 0x06;  // reset EP2 FIFO
 339   2        SYNCDELAY;
 340   2        FIFORESET = 0x00;  // reset EP6 FIFO
 341   2        SYNCDELAY;
 342   2      
 343   2        }
 344   1      }
 345          
 346          
 347          BOOL TD_Suspend(void)          // Called before the device goes into suspend mode
 348          {
 349   1         return(TRUE);
 350   1      }
 351          
 352          BOOL TD_Resume(void)          // Called after the device resumes
 353          {
 354   1         return(TRUE);
 355   1      }
 356          
 357          //-----------------------------------------------------------------------------
C51 COMPILER V7.06   MASTER                                                                10/16/2013 16:15:40 PAGE 7   

 358          // Device Request hooks
 359          //   The following hooks are called by the end point 0 device request parser.
 360          //-----------------------------------------------------------------------------
 361          
 362          BOOL DR_GetDescriptor(void)
 363          {
 364   1         return(TRUE);
 365   1      }
 366          
 367          BOOL DR_SetConfiguration(void)   // Called when a Set Configuration command is received
 368          {
 369   1        if( EZUSB_HIGHSPEED( ) )              //usb high-speed mode           
 370   1        { // FX2 enumerated at high speed
 371   2          SYNCDELAY;                  // 
 372   2          EP6AUTOINLENH = 0x02;       // set AUTOIN commit length to 512 bytes
 373   2          SYNCDELAY;                  // 
 374   2          EP6AUTOINLENL = 0x00;
 375   2          SYNCDELAY;                  
 376   2          enum_high_speed = TRUE;
 377   2        }
 378   1        else
 379   1        { // FX2 enumerated at full speed
 380   2          SYNCDELAY;                   
 381   2          EP6AUTOINLENH = 0x00;       // set AUTOIN commit length to 64 bytes
 382   2          SYNCDELAY;                   
 383   2          EP6AUTOINLENL = 0x40;
 384   2          SYNCDELAY;                  
 385   2          enum_high_speed = FALSE;
 386   2        }
 387   1      
 388   1        Configuration = SETUPDAT[2];
 389   1        return(TRUE);            // Handled by user code
 390   1      }
 391          
 392          BOOL DR_GetConfiguration(void)   // Called when a Get Configuration command is received
 393          {
 394   1         EP0BUF[0] = Configuration;
 395   1         EP0BCH = 0;
 396   1         EP0BCL = 1;
 397   1         return(TRUE);            // Handled by user code
 398   1      }
 399          
 400          BOOL DR_SetInterface(void)       // Called when a Set Interface command is received
 401          {
 402   1         AlternateSetting = SETUPDAT[2];
 403   1         return(TRUE);            // Handled by user code
 404   1      }
 405          
 406          BOOL DR_GetInterface(void)       // Called when a Set Interface command is received
 407          {
 408   1         EP0BUF[0] = AlternateSetting;
 409   1         EP0BCH = 0;
 410   1         EP0BCL = 1;
 411   1         return(TRUE);            // Handled by user code
 412   1      }
 413          
 414          BOOL DR_GetStatus(void)
 415          {
 416   1         return(TRUE);
 417   1      }
 418          
 419          BOOL DR_ClearFeature(void)
C51 COMPILER V7.06   MASTER                                                                10/16/2013 16:15:40 PAGE 8   

 420          {
 421   1         return(TRUE);
 422   1      }
 423          
 424          BOOL DR_SetFeature(void)
 425          {
 426   1         return(TRUE);
 427   1      }
 428          #define VX_B0 0xB0 //to switch directly to manual mode
 429          #define VX_BE 0xBE // to switch from  manual to auto mode
 430          #define VX_C4 0xC4 // to trigger EP2OUT GPIF transactns
 431          
 432          #define VX_C0 0xC0
 433          #define VX_C1 0xC1
 434          #define VX_C2 0xC2 // TO COMMIT
 435          #define VX_B1 0xB1 // to switch directly to auto mode
 436          #define VX_B2 0xB2 // your vendor command here
 437          #define VX_B3 0xB3 // enable IN transfers
 438          #define VX_B4 0xB4 // disable IN transfers
 439          #define VX_B5 0xB5 // read GPIFREADYSTAT register
 440          #define VX_B6 0xB6 // read GPIFTRIG register
 441          
 442          BOOL DR_VendorCmnd(void)
 443          {
 444   1        switch (SETUPDAT[1])
 445   1        { case VX_C4:                    // to trigger EP2OUT GPIF transactns
 446   2            if(flg_out)                  // if the packet is already edited and committed, then flg_trig needs t
             -o be asserted for triggering the gpif out transfers 
 447   2              flg_trig = TRUE;
 448   2            *EP0BUF = VX_C4;
 449   2                EP0BCH = 0;
 450   2                EP0BCL = 1;                  
 451   2                EP0CS |= bmHSNAK;             
 452   2          break;
 453   2          case VX_BE:                   //to switch from manual to auto mode
 454   2            auto_mode =TRUE;
 455   2                EP2FIFOCFG =0x00;
 456   2                SYNCDELAY;
 457   2            EP2FIFOCFG = 0x10;  
 458   2                SYNCDELAY;
 459   2            EP6FIFOCFG = 0x08;
 460   2                SYNCDELAY;
 461   2            *EP0BUF = VX_BE;
 462   2                EP0BCH = 0;
 463   2                EP0BCL = 1;                   // Arm endpoint with # bytes to transfer
 464   2                EP0CS |= bmHSNAK; 
 465   2          break;
 466   2              case VX_B0:                    //to switch directly to manual mode
 467   2            auto_mode =FALSE;
 468   2                EP2FIFOCFG = 0x00; 
 469   2            SYNCDELAY;
 470   2            EP6FIFOCFG = 0x00; 
 471   2            SYNCDELAY; 
 472   2            OUTPKTEND = 0x82;
 473   2            SYNCDELAY;
 474   2            OUTPKTEND = 0x82;
 475   2            SYNCDELAY;
 476   2                FIFORESET = 0x06;
 477   2                SYNCDELAY;
 478   2                INPKTEND = 0x86;
 479   2            SYNCDELAY;
 480   2            INPKTEND = 0x86;
C51 COMPILER V7.06   MASTER                                                                10/16/2013 16:15:40 PAGE 9   

 481   2            SYNCDELAY;
 482   2           
 483   2                *EP0BUF = VX_B0;
 484   2                EP0BCH = 0;
 485   2                EP0BCL = 1;                   // Arm endpoint with # bytes to transfer
 486   2                EP0CS |= bmHSNAK;   
 487   2               
 488   2              break;
 489   2      
 490   2      
 491   2      
 492   2              case VX_B1:                    // to switch directly to auto mode
 493   2            auto_mode =TRUE;
 494   2             OUTPKTEND = 0x82;
 495   2                 SYNCDELAY;
 496   2                 OUTPKTEND = 0x82;
 497   2                 SYNCDELAY;
 498   2                 FIFORESET = 0x02;
 499   2             SYNCDELAY;
 500   2                 EP2FIFOCFG = 0x10;  
 501   2                 SYNCDELAY;
 502   2             EP6FIFOCFG = 0x08;
 503   2                 SYNCDELAY;
 504   2            *EP0BUF = VX_B1;
 505   2                EP0BCH = 0;
 506   2                EP0BCL = 1;                   // Arm endpoint with # bytes to transfer
 507   2                EP0CS |= bmHSNAK; 
 508   2                
 509   2              break;
 510   2          case VX_C2:
 511   2            EP2BCH = 0x02;
 512   2            SYNCDELAY;
 513   2            EP2BCL = 0x00;
 514   2            SYNCDELAY;
 515   2            OUTPKTEND = 0x82;
 516   2            SYNCDELAY;
 517   2             *EP0BUF = VX_C2;
 518   2             EP0BCH = 0;
 519   2                EP0BCL = 1;                   // Arm endpoint with # bytes to transfer
 520   2                EP0CS |= bmHSNAK;
 521   2          break;
 522   2          case VX_C0:
 523   2            EP0BUF[0] = EP2FIFOBUF[0];
 524   2            EP0BUF[1] = EP2FIFOBUF[1];
 525   2                EP0BUF[2] = EP2FIFOBUF[2];
 526   2                EP0BUF[3] = EP2FIFOBUF[3];
 527   2                EP0BUF[4] = EP2FIFOBUF[4];
 528   2                EP0BCH = 0;
 529   2                EP0BCL = 5;                   // Arm endpoint with # bytes to transfer
 530   2                EP0CS |= bmHSNAK;
 531   2              break;
 532   2              case VX_C1:
 533   2            EP0BUF[0] = EP4FIFOBUF[0];
 534   2            EP0BUF[1] = EP4FIFOBUF[1];
 535   2                EP0BUF[2] = EP4FIFOBUF[2];
 536   2                EP0BUF[3] = EP4FIFOBUF[3];
 537   2                EP0BUF[4] = EP4FIFOBUF[4];
 538   2                EP0BCH = 0;
 539   2                EP0BCL = 5;                   // Arm endpoint with # bytes to transfer
 540   2                EP0CS |= bmHSNAK;
 541   2              break;
 542   2          case VX_B2:
C51 COMPILER V7.06   MASTER                                                                10/16/2013 16:15:40 PAGE 10  

 543   2          { 
 544   3            // your vendor command here
 545   3      
 546   3            *EP0BUF = VX_B2;
 547   3                EP0BCH = 0;
 548   3                EP0BCL = 1;                   // Arm endpoint with # bytes to transfer
 549   3                EP0CS |= bmHSNAK;             // Acknowledge handshake phase of device request
 550   3            break;
 551   3          }
 552   2              case VX_B3: // enable IN transfers
 553   2              {
 554   3                in_enable = TRUE;
 555   3      
 556   3            *EP0BUF = VX_B3;
 557   3                EP0BCH = 0;
 558   3                EP0BCL = 1;
 559   3                EP0CS |= bmHSNAK;
 560   3                break;
 561   3          }
 562   2              case VX_B4: // disable IN transfers
 563   2              {
 564   3                in_enable = FALSE;
 565   3      
 566   3            *EP0BUF = VX_B4;
 567   3                EP0BCH = 0;
 568   3                EP0BCL = 1;
 569   3                EP0CS |= bmHSNAK;
 570   3                break;
 571   3          }
 572   2              case VX_B5: // read GPIFREADYSTAT register
 573   2              {         
 574   3            EP0BUF[0] = VX_B5;
 575   3                SYNCDELAY;
 576   3                EP0BUF[1] = GPIFREADYSTAT;
 577   3                SYNCDELAY;
 578   3                EP0BCH = 0;
 579   3                EP0BCL = 2;
 580   3                EP0CS |= bmHSNAK;
 581   3                break;
 582   3          }
 583   2          case VX_B6: // read GPIFTRIG register
 584   2              {         
 585   3            EP0BUF[0] = VX_B6;
 586   3                SYNCDELAY;
 587   3                EP0BUF[1] = GPIFTRIG;
 588   3                SYNCDELAY;
 589   3                EP0BCH = 0;
 590   3                EP0BCL = 2;
 591   3                EP0CS |= bmHSNAK;
 592   3                break;
 593   3          }
 594   2         
 595   2           default:
 596   2              return(TRUE);
 597   2        }
 598   1      
 599   1        return(FALSE);
 600   1      }
 601          
 602          //-----------------------------------------------------------------------------
 603          // USB Interrupt Handlers
 604          //   The following functions are called by the USB interrupt jump table.
C51 COMPILER V7.06   MASTER                                                                10/16/2013 16:15:40 PAGE 11  

 605          //-----------------------------------------------------------------------------
 606          
 607          // Setup Data Available Interrupt Handler
 608          void ISR_Sudav(void) interrupt 0
 609          {
 610   1         GotSUD = TRUE;            // Set flag
 611   1         EZUSB_IRQ_CLEAR();
 612   1         USBIRQ = bmSUDAV;         // Clear SUDAV IRQ
 613   1      }
 614          
 615          // Setup Token Interrupt Handler
 616          void ISR_Sutok(void) interrupt 0
 617          {
 618   1         EZUSB_IRQ_CLEAR();
 619   1         USBIRQ = bmSUTOK;         // Clear SUTOK IRQ
 620   1      }
 621          
 622          void ISR_Sof(void) interrupt 0
 623          {
 624   1         EZUSB_IRQ_CLEAR();
 625   1         USBIRQ = bmSOF;            // Clear SOF IRQ
 626   1      }
 627          
 628          void ISR_Ures(void) interrupt 0
 629          {
 630   1         // whenever we get a USB reset, we should revert to full speed mode
 631   1         pConfigDscr = pFullSpeedConfigDscr;
 632   1         ((CONFIGDSCR xdata *) pConfigDscr)->type = CONFIG_DSCR;
 633   1         pOtherConfigDscr = pHighSpeedConfigDscr;
 634   1         ((CONFIGDSCR xdata *) pOtherConfigDscr)->type = OTHERSPEED_DSCR;
 635   1      
 636   1         EZUSB_IRQ_CLEAR();
 637   1         USBIRQ = bmURES;         // Clear URES IRQ
 638   1      }
 639          
 640          void ISR_Susp(void) interrupt 0
 641          {
 642   1         Sleep = TRUE;
 643   1         EZUSB_IRQ_CLEAR();
 644   1         USBIRQ = bmSUSP;
 645   1      }
 646          
 647          void ISR_Highspeed(void) interrupt 0
 648          {
 649   1         if (EZUSB_HIGHSPEED())
 650   1         {
 651   2            pConfigDscr = pHighSpeedConfigDscr;
 652   2            ((CONFIGDSCR xdata *) pConfigDscr)->type = CONFIG_DSCR;
 653   2            pOtherConfigDscr = pFullSpeedConfigDscr;
 654   2            ((CONFIGDSCR xdata *) pOtherConfigDscr)->type = OTHERSPEED_DSCR;
 655   2         }
 656   1      
 657   1         EZUSB_IRQ_CLEAR();
 658   1         USBIRQ = bmHSGRANT;
 659   1      }
 660          void ISR_Ep0ack(void) interrupt 0
 661          {
 662   1      }
 663          void ISR_Stub(void) interrupt 0
 664          {
 665   1      }
 666          void ISR_Ep0in(void) interrupt 0
C51 COMPILER V7.06   MASTER                                                                10/16/2013 16:15:40 PAGE 12  

 667          {
 668   1      }
 669          void ISR_Ep0out(void) interrupt 0
 670          {
 671   1      }
 672          void ISR_Ep1in(void) interrupt 0
 673          {
 674   1      }
 675          void ISR_Ep1out(void) interrupt 0
 676          {
 677   1      }
 678          void ISR_Ep2inout(void) interrupt 0
 679          {
 680   1      }
 681          void ISR_Ep4inout(void) interrupt 0
 682          {
 683   1      }
 684          void ISR_Ep6inout(void) interrupt 0
 685          {
 686   1      }
 687          void ISR_Ep8inout(void) interrupt 0
 688          {
 689   1      }
 690          void ISR_Ibn(void) interrupt 0
 691          {
 692   1      }
 693          void ISR_Ep0pingnak(void) interrupt 0
 694          {
 695   1      }
 696          void ISR_Ep1pingnak(void) interrupt 0
 697          {
 698   1      }
 699          void ISR_Ep2pingnak(void) interrupt 0
 700          {
 701   1      }
 702          void ISR_Ep4pingnak(void) interrupt 0
 703          {
 704   1      }
 705          void ISR_Ep6pingnak(void) interrupt 0
 706          {
 707   1      }
 708          void ISR_Ep8pingnak(void) interrupt 0
 709          {
 710   1      }
 711          void ISR_Errorlimit(void) interrupt 0
 712          {
 713   1      }
 714          void ISR_Ep2piderror(void) interrupt 0
 715          {
 716   1      }
 717          void ISR_Ep4piderror(void) interrupt 0
 718          {
 719   1      }
 720          void ISR_Ep6piderror(void) interrupt 0
 721          {
 722   1      }
 723          void ISR_Ep8piderror(void) interrupt 0
 724          {
 725   1      }
 726          void ISR_Ep2pflag(void) interrupt 0
 727          {
 728   1      }
C51 COMPILER V7.06   MASTER                                                                10/16/2013 16:15:40 PAGE 13  

 729          void ISR_Ep4pflag(void) interrupt 0
 730          {
 731   1      }
 732          void ISR_Ep6pflag(void) interrupt 0
 733          {
 734   1      }
 735          void ISR_Ep8pflag(void) interrupt 0
 736          {
 737   1      }
 738          void ISR_Ep2eflag(void) interrupt 0
 739          {
 740   1      }
 741          void ISR_Ep4eflag(void) interrupt 0
 742          {
 743   1      }
 744          void ISR_Ep6eflag(void) interrupt 0
 745          {
 746   1      }
 747          void ISR_Ep8eflag(void) interrupt 0
 748          {
 749   1      }
 750          void ISR_Ep2fflag(void) interrupt 0
 751          {
 752   1      }
 753          void ISR_Ep4fflag(void) interrupt 0
 754          {
 755   1      }
 756          void ISR_Ep6fflag(void) interrupt 0
 757          {
 758   1      }
 759          void ISR_Ep8fflag(void) interrupt 0
 760          {
 761   1      }
 762          void ISR_GpifComplete(void) interrupt 0
 763          {
 764   1      }
 765          void ISR_GpifWaveform(void) interrupt 0
 766          {
 767   1      }
 768          
 769          //BYTE xdata ledX_rdvar = 0x00;
 770          //BYTE xdata LED_State = 0;
 771          void LED_Off (BYTE LED_Mask)
 772          {
 773   1              if (LED_Mask & bmBIT0)
 774   1              {
 775   2                      ledX_rdvar = LED0_OFF;
 776   2                      LED_State &= ~bmBIT0;
 777   2              }
 778   1              if (LED_Mask & bmBIT1)
 779   1              {
 780   2                      ledX_rdvar = LED1_OFF;
 781   2                      LED_State &= ~bmBIT1;
 782   2              }
 783   1              if (LED_Mask & bmBIT2)
 784   1              {
 785   2                      ledX_rdvar = LED2_OFF;
 786   2                      LED_State &= ~bmBIT2;
 787   2              }
 788   1              if (LED_Mask & bmBIT3)
 789   1              {
 790   2                      ledX_rdvar = LED3_OFF;
C51 COMPILER V7.06   MASTER                                                                10/16/2013 16:15:40 PAGE 14  

 791   2                      LED_State &= ~bmBIT3;
 792   2              }
 793   1      }
 794          
 795          void LED_On (BYTE LED_Mask)
 796          {
 797   1              if (LED_Mask & bmBIT0)
 798   1              {
 799   2                      ledX_rdvar = LED0_ON;
 800   2                      LED_State |= bmBIT0;
 801   2              }
 802   1              if (LED_Mask & bmBIT1)
 803   1              {
 804   2                      ledX_rdvar = LED1_ON;
 805   2                      LED_State |= bmBIT1;
 806   2              }
 807   1              if (LED_Mask & bmBIT2)
 808   1              {
 809   2                      ledX_rdvar = LED2_ON;
 810   2                      LED_State |= bmBIT2;
 811   2              }
 812   1              if (LED_Mask & bmBIT3)
 813   1              {
 814   2                      ledX_rdvar = LED3_ON;
 815   2                      LED_State |= bmBIT3;
 816   2              }
 817   1      }
 818          
 819          //This function controls the state of D4 and D5 LEDs on the Master FX2LP DVK based upon the state of EP2 a
             -nd EP6 FIFOs. 
 820          //Also it blinks LED D2 while the firmware on the device is running
 821          void LED_Control()
 822          {
 823   1      //For LED D4 and D5
 824   1      if (!( EP24FIFOFLGS & EP2EMPTY ))               //LED D4 turns on whenever EP2 has got data to transfer to Slave i.e. E
             -P2 is not Empty
 825   1      LED_On(bmBIT2);
 826   1      else
 827   1      LED_Off(bmBIT2);
 828   1      
 829   1      if (!( EP68FIFOFLGS & EP6FULL ))                //LED D5 turns on whenever EP6 can accept data from Slave i.e. EP6 is no
             -t Full
 830   1      LED_On(bmBIT3);
 831   1      else
 832   1      LED_Off(bmBIT3);
 833   1      
 834   1      //For LED D2
 835   1      //LED D2 blinks to indicate that firmware is running.
 836   1      if (++LED_Count == Blink_Rate)         //Blink_rate=10000 for Seven_segment enabled and 30000 otherwise
 837   1        {
 838   2          if (LED_Status)
 839   2          {
 840   3            LED_Off (bmBIT0);
 841   3            LED_Status = 0;
 842   3          }
 843   2          else
 844   2          {
 845   3            LED_On (bmBIT0);
 846   3            LED_Status = 1;
 847   3          }
 848   2          LED_Count = 0;
 849   2        }
C51 COMPILER V7.06   MASTER                                                                10/16/2013 16:15:40 PAGE 15  

 850   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1570    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     22    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      8    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
