C51 COMPILER V7.07   SLAVE                                                                 12/31/2022 21:44:56 PAGE 1   


C51 COMPILER V7.07, COMPILATION OF MODULE SLAVE
OBJECT MODULE PLACED IN slave.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE slave.c OPTIMIZE(6,SPEED) BROWSE INCDIR(..\inc\) DEBUG OBJECTEXTEND

stmt level    source

   1          #pragma NOIV                    // Do not generate interrupt vectors
   2          //-----------------------------------------------------------------------------
   3          //   File:      slave.c
   4          //   Contents:  Hooks required to implement USB peripheral function.
   5          //              Code written for FX2 REVE 56-pin and above.
   6          //              This firmware is used to demonstrate FX2 Slave FIF
   7          //              operation.
   8          //   Copyright (c) 2003 Cypress Semiconductor All rights reserved
   9          //-----------------------------------------------------------------------------
  10          #include "fx2.h"
  11          #include "fx2regs.h"
  12          #include "fx2sdly.h"            // SYNCDELAY macro
  13          
  14          #define LED_ALL         (bmBIT0 | bmBIT1 | bmBIT2 | bmBIT3)
  15          
  16          // 7-segment readout
  17          #define LED_ADDR                0x21
  18          BYTE xdata Digit[] = { 0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x98, 0x88, 0x83, 0xc6, 0xa1,
             - 0x86, 0x8e };
  19          
  20          extern BOOL GotSUD;             // Received setup data flag
  21          extern BOOL Sleep;
  22          extern BOOL Rwuen;
  23          extern BOOL Selfpwr;
  24          
  25          BYTE Configuration;             // Current configuration
  26          BYTE AlternateSetting;          // Alternate settings
  27          static WORD xdata LED_Count = 0;
  28          static BYTE xdata LED_Status = 0;
  29          static WORD xdata Blink_Rate = 30000;
  30          
  31          #define EP2EMPTY 0x02
  32          #define EP6FULL  0x01
  33          
  34          // EZUSB FX2 PORTA = slave fifo enable(s), when IFCFG[1:0]=11
  35          //sbit PA0 = IOA ^ 0;             // alt. func., INT0#
  36          //sbit PA1 = IOA ^ 1;             // alt. func., INT1#
  37          // sbit PA2 = IOA ^ 2;          // is SLOE
  38          //sbit PA3 = IOA ^ 3;             // alt. func., WU2
  39          // sbit PA4 = IOA ^ 4;          // is FIFOADR0
  40          // sbit PA5 = IOA ^ 5;          // is FIFOADR1
  41          // sbit PA6 = IOA ^ 6;          // is PKTEND
  42          // sbit PA7 = IOA ^ 7;          // is FLAGD
  43          
  44          // EZUSB FX2 PORTC i/o...       port NA for 56-pin FX2
  45          // sbit PC0 = IOC ^ 0;
  46          // sbit PC1 = IOC ^ 1;
  47          // sbit PC2 = IOC ^ 2;
  48          // sbit PC3 = IOC ^ 3;
  49          // sbit PC4 = IOC ^ 4;
  50          // sbit PC5 = IOC ^ 5;
  51          // sbit PC6 = IOC ^ 6;
  52          // sbit PC7 = IOC ^ 7;
  53          
  54          // EZUSB FX2 PORTB = FD[7:0], when IFCFG[1:0]=11
C51 COMPILER V7.07   SLAVE                                                                 12/31/2022 21:44:56 PAGE 2   

  55          // sbit PB0 = IOB ^ 0;
  56          // sbit PB1 = IOB ^ 1;
  57          // sbit PB2 = IOB ^ 2;
  58          // sbit PB3 = IOB ^ 3;
  59          // sbit PB4 = IOB ^ 4;
  60          // sbit PB5 = IOB ^ 5;
  61          // sbit PB6 = IOB ^ 6;
  62          // sbit PB7 = IOB ^ 7;
  63          
  64          // EZUSB FX2 PORTD = FD[15:8], when IFCFG[1:0]=11 and WORDWIDE=1
  65          //sbit PD0 = IOD ^ 0;
  66          //sbit PD1 = IOD ^ 1;
  67          //sbit PD2 = IOD ^ 2;
  68          //sbit PD3 = IOD ^ 3;
  69          //sbit PD4 = IOD ^ 4;
  70          //sbit PD5 = IOD ^ 5;
  71          //sbit PD6 = IOD ^ 6;
  72          //sbit PD7 = IOD ^ 7;
  73          
  74          // EZUSB FX2 PORTE is not bit-addressable...
  75          
  76          //-----------------------------------------------------------------------------
  77          // Task Dispatcher hooks
  78          // The following hooks are called by the task dispatcher.
  79          //-----------------------------------------------------------------------------
  80          //void LED_Off (BYTE LED_Mask);
  81          //void LED_On (BYTE LED_Mask);
  82          //void LED_Control();
  83          
  84          BOOL Header_insert = FALSE; // insert header
  85          
  86          //-----------------------------------------------------------------------------
  87          // Task Dispatcher hooks
  88          //   The following hooks are called by the task dispatcher.
  89          //-----------------------------------------------------------------------------
  90          void TD_Init( void )
  91          { // Called once at startup
  92   1      
  93   1        CPUCS = 0x12; // CLKSPD[1:0]=10, for 48MHz operation, output CLKOUT
  94   1      
  95   1      /*
  96   1      //7-segment
  97   1      #ifdef Seven_segment
  98   1      EZUSB_INITI2C();                                // initialize I2C for 7-seg readout
  99   1      Blink_Rate = 1000; 
 100   1      #endif  
 101   1      */
 102   1      
 103   1      //IFCONFIG = 0xCF; // for async? for sync?
 104   1      IFCONFIG = 0x03;  //external clock input, Slave FIFO interface  //      hong : fix to receive IFCLK from externa
             -l
 105   1      
 106   1        // IFCLKSRC=1   , FIFOs executes on external clk source 
 107   1        // xMHz=1       , don't care since IFCLKSRC=0
 108   1        // IFCLKOE=0    , Don't drive IFCLK pin signal at 48MHz
 109   1        // IFCLKPOL=0   , (Don't) invert IFCLK pin signal from internal clk
 110   1        // ASYNC=1      , master samples synchronous
 111   1        // GSTATE=1     , Don't drive GPIF states out on PORTE[2:0], debug WF
 112   1        // IFCFG[1:0]=11, FX2 in slave FIFO mode
 113   1      
 114   1      
 115   1        // Registers which require a synchronization delay, see section 15.14
C51 COMPILER V7.07   SLAVE                                                                 12/31/2022 21:44:56 PAGE 3   

 116   1        // FIFORESET        FIFOPINPOLAR
 117   1        // INPKTEND         OUTPKTEND
 118   1        // EPxBCH:L         REVCTL
 119   1        // GPIFTCB3         GPIFTCB2
 120   1        // GPIFTCB1         GPIFTCB0
 121   1        // EPxFIFOPFH:L     EPxAUTOINLENH:L
 122   1        // EPxFIFOCFG       EPxGPIFFLGSEL
 123   1        // PINFLAGSxx       EPxFIFOIRQ
 124   1        // EPxFIFOIE        GPIFIRQ
 125   1        // GPIFIE           GPIFADRH:L
 126   1        // UDMACRCH:L       EPxGPIFTRIG
 127   1        // GPIFTRIG
 128   1        
 129   1        // Note: The pre-REVE EPxGPIFTCH/L register are affected, as well...
 130   1        //      ...these have been replaced by GPIFTC[B3:B0] registers
 131   1      
 132   1        EP2CFG = 0xA0;     // EP2OUT, bulk, size 512, 4x buffered
 133   1        SYNCDELAY;           
 134   1        EP6CFG = 0xE0;     // EP6IN, bulk, size 512, 4x buffered
 135   1        SYNCDELAY;
 136   1        EP4CFG = 0x00;     // EP4 not valid
 137   1        SYNCDELAY;               
 138   1        EP8CFG = 0x00;     // EP8 not valid
 139   1        SYNCDELAY;
 140   1        
 141   1        FIFORESET = 0x80;  // set NAKALL bit to NAK all transfers from host
 142   1        SYNCDELAY;
 143   1        FIFORESET = 0x02;  // reset EP2 FIFO
 144   1        SYNCDELAY;
 145   1        FIFORESET = 0x06;  // reset EP6 FIFO
 146   1        SYNCDELAY;
 147   1        FIFORESET = 0x04;  // reset EP6 FIFO
 148   1        SYNCDELAY;
 149   1        FIFORESET = 0x08;  // reset EP6 FIFO
 150   1        SYNCDELAY;
 151   1        FIFORESET = 0x00;  // clear NAKALL bit to resume normal operation
 152   1        SYNCDELAY;
 153   1      
 154   1        EP2FIFOCFG = 0x00; //manual mode, 8 bit mode
 155   1        SYNCDELAY;
 156   1        EP6FIFOCFG = 0x00; //manual mode, 8 bit mode.
 157   1        SYNCDELAY; 
 158   1        
 159   1        OUTPKTEND =0x82;   //arming the EP2 OUT quadruple times, as it's quad buffered.
 160   1        SYNCDELAY;
 161   1        OUTPKTEND =0x82;
 162   1        SYNCDELAY; 
 163   1        OUTPKTEND =0x82;   
 164   1        SYNCDELAY;
 165   1        OUTPKTEND =0x82;
 166   1        SYNCDELAY; 
 167   1      
 168   1        SYNCDELAY;
 169   1        PINFLAGSAB = 0xE0;                    // FLAGA - indexed, FLAGB - EP6FF
 170   1        SYNCDELAY;
 171   1        PINFLAGSCD = 0x08;                    // FLAGC - EP2EF, FLAGD - indexed
 172   1        SYNCDELAY;
 173   1      
 174   1      /*
 175   1        PORTCCFG =0x00;                 // Write 0x00 to PORTCCFG to configure it as an I/O port
 176   1        OEC = 0x06;                     // Configure PC0 as input, PC1 as output and PC2 as output    
 177   1        PC1 =0;                         // initialize PC1 state to "low"
C51 COMPILER V7.07   SLAVE                                                                 12/31/2022 21:44:56 PAGE 4   

 178   1        PC2=0;                                              // initialze PC2 state to "low"            
 179   1      */
 180   1        }
 181          
 182          void TD_Poll( void )
 183          { // Called repeatedly while the device is idle
 184   1               BYTE waiting_inpkts;            
 185   1      /*
 186   1      // update 7-seg readout with number of IN packets waiting for transfer to the host
 187   1      #ifdef Seven_segment 
 188   1        waiting_inpkts = (EP6CS & 0xF0)>>4;                   //right shift by 4 bits
 189   1        EZUSB_WriteI2C(LED_ADDR, 0x01, &(Digit[waiting_inpkts]));
 190   1        EZUSB_WaitForEEPROMWrite(LED_ADDR);
 191   1      #endif
 192   1      
 193   1        // blink LED D2 to indicate firmware is running and LED D4 and D5 to show the states of FIFO of EP2 and 
             -EP6
 194   1      #ifdef LED_Enable
 195   1      LED_Control();    
 196   1      #endif
 197   1      */
 198   1        // Handle IN data...
 199   1        /*
 200   1               PC2=1;         //asserting SLAVEREADY to show that slave firmware has started running
 201   1               if (PC0 == 0 &&(!(EP68FIFOFLGS & 0x02)))       //if PC0/Txn_Over ==0 and EP6 is not empty,           
 202   1                      {                                                                                               // meaning master has written data to the slave
 203   1                      EP6FIFOBUF[ 507 ] = 0x05; //edit the last five packets before committing
 204   1                              EP6FIFOBUF[ 508] = 0x04; 
 205   1                              EP6FIFOBUF[ 509 ] = 0x03; 
 206   1                              EP6FIFOBUF[ 510 ] = 0x02; 
 207   1                              EP6FIFOBUF[ 511 ] = 0x01;
 208   1                              SYNCDELAY;
 209   1                              SYNCDELAY;
 210   1                              EP6BCH = 0x02;            //commiting the packet
 211   1                              SYNCDELAY;
 212   1                              EP6BCL = 0x00;
 213   1                              SYNCDELAY;      
 214   1      
 215   1                              PC1 = ~PC1;                   //toggle PC0 to indicate that the buffer has been passed
 216   1                              while(  PC0 != 1);            //wait for PC0 to become high again. This is to prevent committing multip
             -le packets at a single assertion of PC0
 217   1                              
 218   1                      }
 219   1      */
 220   1      
 221   1      // Handle OUT data...
 222   1                        
 223   1                      if( !( EP2468STAT & 0x01 ) )   //if EP2 is not empty, modify the packet and commit it to the periphera
             -l domain
 224   1                      { 
 225   2                  
 226   2                              SYNCDELAY; //
 227   2                      EP2FIFOBUF[511] = 0x01; // editing the packet
 228   2                          SYNCDELAY; 
 229   2                          EP2FIFOBUF[510] = 0x02; 
 230   2                          SYNCDELAY; 
 231   2                          EP2FIFOBUF[509] = 0x03; 
 232   2                          SYNCDELAY; 
 233   2                          EP2FIFOBUF[508] = 0x04; 
 234   2                          SYNCDELAY; 
 235   2                          EP2FIFOBUF[507] = 0x05; 
 236   2                          SYNCDELAY; 
C51 COMPILER V7.07   SLAVE                                                                 12/31/2022 21:44:56 PAGE 5   

 237   2                          EP2BCH = 0x02;
 238   2                      SYNCDELAY; 
 239   2                          EP2BCL = 0x00;       // commit edited pkt. to interface fifo
 240   2                          SYNCDELAY; 
 241   2            }
 242   1      }
*** WARNING C280 IN LINE 184 OF SLAVE.C: 'waiting_inpkts': unreferenced local variable
 243          
 244          BOOL TD_Suspend( void )          
 245          { // Called before the device goes into suspend mode
 246   1         return( TRUE );
 247   1      }
 248          
 249          BOOL TD_Resume( void )          
 250          { // Called after the device resumes
 251   1         return( TRUE );
 252   1      }
 253          
 254          //-----------------------------------------------------------------------------
 255          // Device Request hooks
 256          //   The following hooks are called by the end point 0 device request parser.
 257          //-----------------------------------------------------------------------------
 258          BOOL DR_GetDescriptor( void )
 259          {
 260   1         return( TRUE );
 261   1      }
 262          
 263          BOOL DR_SetConfiguration( void )   
 264          { // Called when a Set Configuration command is received
 265   1        
 266   1        if( EZUSB_HIGHSPEED( ) )      //usb high-speed mode
 267   1        { // ...FX2 in high speed mode
 268   2          EP6AUTOINLENH = 0x02;
 269   2          SYNCDELAY;
 270   2          EP8AUTOINLENH = 0x02;   // set core AUTO commit len = 512 bytes
 271   2          SYNCDELAY;
 272   2          EP6AUTOINLENL = 0x00;
 273   2          SYNCDELAY;
 274   2          EP8AUTOINLENL = 0x00;
 275   2        }
 276   1        else
 277   1        { // ...FX2 in full speed mode
 278   2          EP6AUTOINLENH = 0x00;
 279   2          SYNCDELAY;
 280   2          EP8AUTOINLENH = 0x00;   // set core AUTO commit len = 64 bytes
 281   2          SYNCDELAY;
 282   2          EP6AUTOINLENL = 0x40;
 283   2          SYNCDELAY;
 284   2          EP8AUTOINLENL = 0x40;
 285   2        }
 286   1            
 287   1        Configuration = SETUPDAT[ 2 ];
 288   1        return( TRUE );        // Handled by user code
 289   1      }
 290          
 291          BOOL DR_GetConfiguration( void )   
 292          { // Called when a Get Configuration command is received
 293   1         EP0BUF[ 0 ] = Configuration;
 294   1         EP0BCH = 0;
 295   1         EP0BCL = 1;
 296   1         return(TRUE);          // Handled by user code
 297   1      }
C51 COMPILER V7.07   SLAVE                                                                 12/31/2022 21:44:56 PAGE 6   

 298          
 299          BOOL DR_SetInterface( void )       
 300          { // Called when a Set Interface command is received
 301   1         AlternateSetting = SETUPDAT[ 2 ];
 302   1         return( TRUE );        // Handled by user code
 303   1      }
 304          
 305          BOOL DR_GetInterface( void )       
 306          { // Called when a Set Interface command is received
 307   1         EP0BUF[ 0 ] = AlternateSetting;
 308   1         EP0BCH = 0;
 309   1         EP0BCL = 1;
 310   1         return( TRUE );        // Handled by user code
 311   1      }
 312          
 313          BOOL DR_GetStatus( void )
 314          {
 315   1         return( TRUE );
 316   1      }
 317          
 318          BOOL DR_ClearFeature( void )
 319          {
 320   1         return( TRUE );
 321   1      }
 322          
 323          BOOL DR_SetFeature( void )
 324          {
 325   1         return( TRUE );
 326   1      }
 327          
 328          #define VX_B7 0xB2
 329          #define VX_B8 0xB3
 330          
 331          BOOL DR_VendorCmnd( void )
 332          {
 333   1       switch (SETUPDAT[1])
 334   1        {
 335   2       case VX_B7: // read GPIFTRIG register
 336   2      
 337   2                                
 338   2                      FIFORESET = 0x80;
 339   2                      SYNCDELAY;
 340   2                      FIFORESET = 0x02;
 341   2                      SYNCDELAY;
 342   2                      FIFORESET = 0x00;
 343   2                      SYNCDELAY;
 344   2                      EP0BUF[0] = EP68FIFOFLGS;
 345   2                      EP0BUF[1] = EP2FIFOBCL;
 346   2                      EP0BCH = 0;
 347   2                      EP0BCL = 2;
 348   2                      EP0CS |= bmHSNAK;       
 349   2              
 350   2                      Header_insert = TRUE;
 351   2                      break;
 352   2      
 353   2              case VX_B8:
 354   2                      EP0BUF[0] = EP68FIFOFLGS;
 355   2                      EP0BUF[1] = EP2FIFOBCL;
 356   2                      EP0BCH = 0;
 357   2                      EP0BCL = 2;
 358   2                      EP0CS |= bmHSNAK;       
 359   2                      break;
C51 COMPILER V7.07   SLAVE                                                                 12/31/2022 21:44:56 PAGE 7   

 360   2         default:
 361   2         return( TRUE );
 362   2        }
 363   1      }
 364          
 365          //-----------------------------------------------------------------------------
 366          // USB Interrupt Handlers
 367          //   The following functions are called by the USB interrupt jump table.
 368          //-----------------------------------------------------------------------------
 369          
 370          // Setup Data Available Interrupt Handler
 371          void ISR_Sudav( void ) interrupt 0
 372          {
 373   1         GotSUD = TRUE;         // Set flag
 374   1         EZUSB_IRQ_CLEAR( );
 375   1         USBIRQ = bmSUDAV;      // Clear SUDAV IRQ
 376   1      }
 377          
 378          // Setup Token Interrupt Handler
 379          void ISR_Sutok( void ) interrupt 0
 380          {
 381   1         EZUSB_IRQ_CLEAR( );
 382   1         USBIRQ = bmSUTOK;      // Clear SUTOK IRQ
 383   1      }
 384          
 385          void ISR_Sof( void ) interrupt 0
 386          {
 387   1         EZUSB_IRQ_CLEAR( );
 388   1         USBIRQ = bmSOF;        // Clear SOF IRQ
 389   1      }
 390          
 391          void ISR_Ures( void ) interrupt 0
 392          {
 393   1         if ( EZUSB_HIGHSPEED( ) )     //usb high-speed mode
 394   1         {
 395   2            pConfigDscr = pHighSpeedConfigDscr;
 396   2            pOtherConfigDscr = pFullSpeedConfigDscr;
 397   2         }
 398   1         else
 399   1         {
 400   2            pConfigDscr = pFullSpeedConfigDscr;
 401   2            pOtherConfigDscr = pHighSpeedConfigDscr;
 402   2         }
 403   1         
 404   1         EZUSB_IRQ_CLEAR( );
 405   1         USBIRQ = bmURES;       // Clear URES IRQ
 406   1      }
 407          
 408          void ISR_Susp( void ) interrupt 0
 409          {
 410   1         Sleep = TRUE;
 411   1         EZUSB_IRQ_CLEAR( );
 412   1         USBIRQ = bmSUSP;
 413   1      }
 414          
 415          void ISR_Highspeed( void ) interrupt 0
 416          {
 417   1         if ( EZUSB_HIGHSPEED( ) )            //usb high-speed mode
 418   1         {
 419   2            pConfigDscr = pHighSpeedConfigDscr;
 420   2            pOtherConfigDscr = pFullSpeedConfigDscr;
 421   2         }
C51 COMPILER V7.07   SLAVE                                                                 12/31/2022 21:44:56 PAGE 8   

 422   1         else
 423   1         {
 424   2            pConfigDscr = pFullSpeedConfigDscr;
 425   2            pOtherConfigDscr = pHighSpeedConfigDscr;
 426   2         }
 427   1      
 428   1         EZUSB_IRQ_CLEAR( );
 429   1         USBIRQ = bmHSGRANT;
 430   1      }
 431          void ISR_Ep0ack( void ) interrupt 0
 432          {
 433   1      }
 434          void ISR_Stub( void ) interrupt 0
 435          {
 436   1      }
 437          void ISR_Ep0in( void ) interrupt 0
 438          {
 439   1      }
 440          void ISR_Ep0out( void ) interrupt 0
 441          {
 442   1      }
 443          void ISR_Ep1in( void ) interrupt 0
 444          {
 445   1      }
 446          void ISR_Ep1out( void ) interrupt 0
 447          {
 448   1      }
 449          void ISR_Ep2inout( void ) interrupt 0
 450          {
 451   1      }
 452          void ISR_Ep4inout( void ) interrupt 0
 453          {
 454   1      }
 455          void ISR_Ep6inout( void ) interrupt 0
 456          {
 457   1      }
 458          void ISR_Ep8inout( void ) interrupt 0
 459          {
 460   1      }
 461          void ISR_Ibn( void ) interrupt 0
 462          {
 463   1      }
 464          void ISR_Ep0pingnak( void ) interrupt 0
 465          {
 466   1      }
 467          void ISR_Ep1pingnak( void ) interrupt 0
 468          {
 469   1      }
 470          void ISR_Ep2pingnak( void ) interrupt 0
 471          {
 472   1      }
 473          void ISR_Ep4pingnak( void ) interrupt 0
 474          {
 475   1      }
 476          void ISR_Ep6pingnak( void ) interrupt 0
 477          {
 478   1      }
 479          void ISR_Ep8pingnak( void ) interrupt 0
 480          {
 481   1      }
 482          void ISR_Errorlimit( void ) interrupt 0
 483          {
C51 COMPILER V7.07   SLAVE                                                                 12/31/2022 21:44:56 PAGE 9   

 484   1      }
 485          void ISR_Ep2piderror( void ) interrupt 0
 486          {
 487   1      }
 488          void ISR_Ep4piderror( void ) interrupt 0
 489          {
 490   1      }
 491          void ISR_Ep6piderror( void ) interrupt 0
 492          {
 493   1      }
 494          void ISR_Ep8piderror( void ) interrupt 0
 495          {
 496   1      }
 497          void ISR_Ep2pflag( void ) interrupt 0
 498          {
 499   1      }
 500          void ISR_Ep4pflag( void ) interrupt 0
 501          {
 502   1      }
 503          void ISR_Ep6pflag( void ) interrupt 0
 504          {
 505   1      }
 506          void ISR_Ep8pflag( void ) interrupt 0
 507          {
 508   1      }
 509          void ISR_Ep2eflag( void ) interrupt 0
 510          {
 511   1      }
 512          void ISR_Ep4eflag( void ) interrupt 0
 513          {
 514   1      }
 515          void ISR_Ep6eflag( void ) interrupt 0
 516          {
 517   1      }
 518          void ISR_Ep8eflag( void ) interrupt 0
 519          {
 520   1      }
 521          void ISR_Ep2fflag( void ) interrupt 0
 522          {
 523   1      }
 524          void ISR_Ep4fflag( void ) interrupt 0
 525          {
 526   1      }
 527          void ISR_Ep6fflag( void ) interrupt 0
 528          {
 529   1      }
 530          void ISR_Ep8fflag( void ) interrupt 0
 531          {
 532   1      }
 533          void ISR_GpifComplete( void ) interrupt 0
 534          {
 535   1      }
 536          void ISR_GpifWaveform( void ) interrupt 0
 537          {
 538   1      }
 539          
 540          // ...debug LEDs: accessed via movx reads only ( through CPLD )
 541          // it may be worth noting here that the default monitor loads at 0xC000
 542          xdata volatile const BYTE LED0_ON  _at_ 0x8800;
 543          xdata volatile const BYTE LED0_OFF _at_ 0x8000;
 544          xdata volatile const BYTE LED1_ON  _at_ 0x9800;
 545          xdata volatile const BYTE LED1_OFF _at_ 0x9000;
C51 COMPILER V7.07   SLAVE                                                                 12/31/2022 21:44:56 PAGE 10  

 546          xdata volatile const BYTE LED2_ON  _at_ 0xA800;
 547          xdata volatile const BYTE LED2_OFF _at_ 0xA000;
 548          xdata volatile const BYTE LED3_ON  _at_ 0xB800;
 549          xdata volatile const BYTE LED3_OFF _at_ 0xB000;
 550          // use this global variable when (de)asserting debug LEDs...
 551          BYTE xdata ledX_rdvar = 0x00;
 552          BYTE xdata LED_State = 0;
 553          /*
 554          void LED_Off (BYTE LED_Mask)
 555          {
 556                  if (LED_Mask & bmBIT0)
 557                  {
 558                          ledX_rdvar = LED0_OFF;
 559                          LED_State &= ~bmBIT0;
 560                  }
 561                  if (LED_Mask & bmBIT1)
 562                  {
 563                          ledX_rdvar = LED1_OFF;
 564                          LED_State &= ~bmBIT1;
 565                  }
 566                  if (LED_Mask & bmBIT2)
 567                  {
 568                          ledX_rdvar = LED2_OFF;
 569                          LED_State &= ~bmBIT2;
 570                  }
 571                  if (LED_Mask & bmBIT3)
 572                  {
 573                          ledX_rdvar = LED3_OFF;
 574                          LED_State &= ~bmBIT3;
 575                  }
 576          }
 577          
 578          void LED_On (BYTE LED_Mask)
 579          {
 580                  if (LED_Mask & bmBIT0)
 581                  {
 582                          ledX_rdvar = LED0_ON;
 583                          LED_State |= bmBIT0;
 584                  }
 585                  if (LED_Mask & bmBIT1)
 586                  {
 587                          ledX_rdvar = LED1_ON;
 588                          LED_State |= bmBIT1;
 589                  }
 590                  if (LED_Mask & bmBIT2)
 591                  {
 592                          ledX_rdvar = LED2_ON;
 593                          LED_State |= bmBIT2;
 594                  }
 595                  if (LED_Mask & bmBIT3)
 596                  {
 597                          ledX_rdvar = LED3_ON;
 598                          LED_State |= bmBIT3;
 599                  }
 600          }
 601          */
 602          /*
 603          //This function controls the state of D4 and D5 LEDs on the Slave FX2LP DVK based upon the state of EP2 an
             -d EP6 FIFOs. 
 604          //Also it blinks LED D2 while the firmware on the device is running
 605          void LED_Control()
 606          {
C51 COMPILER V7.07   SLAVE                                                                 12/31/2022 21:44:56 PAGE 11  

 607          //For LED D4 and D5 
 608          if (!( EP24FIFOFLGS & EP2EMPTY ))               //LED D4 turns on whenever EP2 has got data to transfer to Master i.e. 
             -EP2 is not Empty
 609          LED_On(bmBIT2);
 610          else
 611          LED_Off(bmBIT2);
 612          
 613          if (!( EP68FIFOFLGS & EP6FULL ))                //LED D5 turns on whenever EP6 can accept data from Master i.e. EP6 is n
             -ot Full
 614          LED_On(bmBIT3);
 615          else
 616          LED_Off(bmBIT3);
 617          
 618          //For blinking LED D2
 619          //LED D2 blinks to indicate that firmware is running.
 620          if (++LED_Count == Blink_Rate)          //Blink_rate=10000 for Seven_segment enabled and 30000 otherwise
 621            {
 622              if (LED_Status)
 623              {
 624                LED_Off (bmBIT0);
 625                LED_Status = 0;
 626              }
 627              else
 628              {
 629                LED_On (bmBIT0);
 630                LED_Status = 1;
 631              }
 632              LED_Count = 0;
 633            }
 634          }
 635          */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    675    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     23    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
